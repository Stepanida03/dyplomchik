import allure
import pytest
from .api_chitaigorod import ChitaiGorodAPI
from .config import API_URL


url = ChitaiGorodAPI(API_URL)


@allure.feature("API –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-—Å–∞–π—Ç–∞'–ß–∏—Ç–∞–π –≥–æ—Ä–æ–¥'")
@allure.severity("critical")
@pytest.mark.api_test
@pytest.mark.parametrize("title", [
    "–º–∞—É–≥–ª–∏",
    "–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ—ç–º–∞"
])
def test_search_book_name_positive(title: str):
    with allure.step("–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∫–∏—Ä–∏–ª–∏–µ"):
        result = url.search_product(phrase=title)
        assert result.status_code == 200
        assert result.json()["data"]["attributes"]
        ["transformedPhrase"] == title


@allure.feature("API –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-—Å–∞–π—Ç–∞'–ß–∏—Ç–∞–π –≥–æ—Ä–æ–¥'")
@allure.severity("critical")
@pytest.mark.api_test
@pytest.mark.parametrize("title", [
    "È¶ñÊïôÂ≠¶ËØó",
    "üòÄüòÄüòÄ"
])
def test_search_book_name_negative(title: str):
    with allure.step("–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"):
        result = url.search_product(phrase=title)
        assert result.status_code == 422
        assert result.json()['errors'][0]
        ['title'] == "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–∏—Å–∫–æ–≤–∞—è —Ñ—Ä–∞–∑–∞"


@allure.feature("API –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-—Å–∞–π—Ç–∞'–ß–∏—Ç–∞–π –≥–æ—Ä–æ–¥'")
@allure.severity("critical")
@pytest.mark.api_test
@pytest.mark.parametrize("title", [
    "–∫–∏–ø–ª–∏–Ω–≥",
    "–º–∞–∫–∞—Ä–µ–Ω–∫–æ"
])
def test_search_book_author_positive(title: str):
    with allure.step("–í–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∞"):
        result = url.search_product(phrase=title)
        assert result.status_code == 200
        assert result.json()["data"]["attributes"]
        ["transformedPhrase"] == title


@allure.feature("API –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-—Å–∞–π—Ç–∞'–ß–∏—Ç–∞–π –≥–æ—Ä–æ–¥'")
@allure.severity("critical")
@pytest.mark.api_test
@pytest.mark.parametrize("title", [
    "—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "–∫–æ–º–∏–∫—Å—ã"
])
def test_search_book_genre_positive(title: str):
    with allure.step("–í–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Ç–±–æ—Ä–∞"):
        result = url.search_product(phrase=title)
        assert result.status_code == 200
        assert result.json()["data"]["attributes"]
        ["transformedPhrase"] == title


@allure.feature("API –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-—Å–∞–π—Ç–∞'–ß–∏—Ç–∞–π –≥–æ—Ä–æ–¥'")
@allure.severity("critical")
@pytest.mark.api_test
@pytest.mark.parametrize("title", [
    " "
])
def test_search_book_empty_field_negative(title: str):
    with allure.step("–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ"):
        result = url.search_product(phrase=title)
        assert result.status_code == 400
        assert result.json()['errors'][0]
        ['title'] == "Phrase –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
